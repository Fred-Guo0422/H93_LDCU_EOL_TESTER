/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//File Name:					22684_H93_LDCU_EOL_TESTER_V1.0
//Customer: 					XPeng
//Project:   					21271_XPeng_F30 XPU System Upgrade Tester
//Creator:   					Fred Guo
//Software Revision:				RevA1
//Jabiltest Version:    			7.53.00
//Released:					2023/04/12
//Description:				22684_H93_LDCU_EOL_TESTER
///////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 以下为全局地Debug 标志位
//~ $Show_Mark_Full_CAN_Message_Enable=true; //在每次CAN通讯后，会将所有的接收的数据进行整理统一显示，设置true则进行显示，设置为false则不显示
//~ $Report_Mark_SendMessage_Enable=false;  //记录发送数据的Mark标志位,若为true 则记录
//~ $Report_Mark_ReceiveMessage_Enable=false;  //记录接收数据的Mark标志位, 若为true则记录
//~ $Report_Mark_ReceiveMessage_NoState_Enable=false; //记录接收数据（不包含帧头命令状态反馈部分）
//~ $Report_Mark_ReceiveMessage_Binary_Enable=false; //记录反馈字段的二进制字符串，仅适用于DI
$Report_Mark_SendMessage_Enable=true;  //记录发送数据的Mark标志位,若为true 则记录
$Report_Mark_ReceiveMessage_Enable=true;  //记录接收数据的Mark标志位, 若为true则记录
$Report_Mark_LoadBox_Action_Enable=true;  //记录接收数据的Mark标志位, 若为true则记录
$g_DO_TestDebug=false;
$g_AI_TestDebug=false;
$g_PWMIN_TestDebug=false;
$g_PWMOUT_TestDebug=false;
$g_FULL_Bridge_TestDebug=false;
$g_DI_TestDebug=false;
$g_FULL_Bridge_Debug =false;

#include<"D:\\22684_H93_LDCU_EOL_TESTER\\SubScripts\\Sub_ZLG_CAN.jts">
#include<"D:\\22684_H93_LDCU_EOL_TESTER\\SubScripts\\H93_LDCU_V1.0.jts">
#include<"D:\\22684_H93_LDCU_EOL_TESTER\\SubScripts\\FIxtureControl.jts">
#include<"D:\\22684_H93_LDCU_EOL_TESTER\\SubScripts\\Instrument.jts"> 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  // Sequence Start
  SetFinalizeFunction("PostUUT");
  SetFailFunction("OnFail");
  SetAbortFunction("OnAbort");
  call PreUUT();

  //~ call Digital_OUT_FIX_RES_TEST();
  //~ call UUT_Barcode_Scan();
  $testName = "WorkMode_Current";
  SetTestName($testName);
  call WorkMode_Current();
  call Fixtures_LoadBox_LoadOn(); 

  //~ OperatorPrompt("Main Test Start", "OK");

  SetTestName("INTO_EOL");
  call INTO_1001();
  call INTO_1003();
  call INTO_1060();
  call INTO_2701();
  call INTO_2702();
  SetTestName("CHECK_VER");
  call Read_HW_VER_F17F();
  call Read_SW_VER_F189();
  //~ call ALL_PWM_OUT_OFF();
  //~ call ALL_DO_Off();
  SetTestName("WRITE_DUT_INFO");
  call Write_ECU_offline_date();
  call Write_PCBA_SN();
  call write_factory_mode_start();
  call write_power_mode();
  call Write_CAR_MODE();
  call EMMC_WRITE()
  call EEPROM_WRITE();
  SetTestName("Restart_DUT");
  call Restart_DUT();
  Sleep(5);
  SetTestName("INTO_EOL");
  call INTO_1001();
  call INTO_1003();
  call INTO_1060();
  call INTO_2701();
  call INTO_2702();
  SetTestName("Read_DUT_INFO");
  call read_factory_mode_start();
  //~ call read_factory_mode_end();
  call read_power_mode();
  call Read_ECU_offline_date();
  call READ_CAR_MODE();
  call Read_PCBA_SN();
  call EEPROM_READ();
  call EMMC_READ();
  //~ SetTestName("INTO EOL Mode");
  
  
  //~ // PWM OUT TEST
  call PWM_OUT_TEST();
  //Analog_INPUT
  call Analog_INPUT_RES_TYPE_TEST();
  call Analog_INPUT_VOL_TYPE_TEST();
  
  //~ call CHECK_DCT_CODE();
  call J5_25_LIN_PWS_TEST();
  call J5_28_LIN_FKS_TEST();
  call J3_2_LIN_AGSEBS_TEST();

  
  
  //~ call LIN_TEST();
  
  //~ //Digital_OUT
  call Digital_OUT_TEST();
  //~ OperatorPrompt("Digital_OUT_OFF_TEST", "OK");
  


  
  //Digital_IN
  call Digital_IN_UNLOADING_TEST();
  //~ OperatorPrompt("Digital_IN_UNLOADING_TEST_Debug!!!!", "OK");
  call Digital_IN_LOADING_TEST();
  //~ OperatorPrompt("Digital_IN_UNLOADING_TEST_Debug!!!!", "OK");

  //~ call PWM_IN_TEST();

   
  //FULL_Bridge
  //~ OperatorPrompt($DI_PIN, "OK");
  call FULL_Bridge_TEST_Sate1();
  call FULL_Bridge_TEST_Sate2();
  call FULL_Bridge_TEST_Sate3();
  call J8_09_J8_010_Corotation();
  call J8_09_J8_010_Reverses();
  call J8_09_J8_010_brake();
  call J8_12_J8_010_Corotation();
  call J8_12_J8_010_Reverses();
  call J8_12_J8_010_brake();
  call J6_02_J6_04_Corotation();
  call J6_02_J6_04_Reverses();
  call J6_02_J6_04_brake();
  call J6_04_J4_03_Corotation();
  call J6_04_J4_03_Reverses();
  call J6_04_J4_03_brake();
  

    // PWM_IN
  // Sleep_waken_TEST
  call SLEEP_WAKEN_TEST();
  
End;
function WorkMode_Current()
{
    SetTestName("WorkMode_Current");
    Sleep(2);
    $Current_USL=5;
    $Current_LSL=0.3;
    $measureName="WorkMode_current";
    call IT6722_Current();
    call Fixtures_LoadBox_LoadOn(); 
    //~ OperatorPrompt("WorkMode_current", "OK");
    return;
  }


function DUT_INFO_CHECK()
{
      $View_TXT_String="DUT_INFO_CHECK";
      call Method_View_TXT_Process_Main();
      SetTestName("Check Ver");
      call Read_HW_VER_F17F();
      call Read_SW_VER_F189();
      //~ call ALL_PWM_OUT_OFF();
      //~ call ALL_DO_Off();
      SetTestName("Write_DUT_INFO");
      call Write_ECU_offline_date();
      call Write_PCBA_SN();
      call write_factory_mode_start();
      call write_power_mode();
      call Write_CAR_MODE();
      //~ call write_factory_mode_end();
      call EMMC_WRITE()
      call EEPROM_WRITE();
      SetTestName("Reset_DUT");
      call Restart_DUT();
      Sleep(1);
      SetTestName("Read_DUT_INFO");
      call read_factory_mode_start();
      //~ call read_factory_mode_end();
      call read_power_mode();
      call Read_ECU_offline_date();
      call READ_CAR_MODE();
      call Read_PCBA_SN();
      call EEPROM_READ();
      call EMMC_READ();
      return;
  }
  

function Initialize()
{
  $View_TXT_String="Initialize";
  call Method_View_TXT_Process_Main();
 // laod config files
  $g_Testdebug=true;  ///Global debugging flag
  $g_System_Config_File="D:\\22684_H93_LDCU_EOL_TESTER\\ConfigFiles\\HW_Config.ini";
  $g_ConfigPath = "D:\\22684_H93_LDCU_EOL_TESTER\\ConfigFiles\\";
  
  $View_TXT_String="初始化文件配置信息";
  call Method_View_TXT_Process_Main();
  $g_DUT_Station="LDCU_EOL";
  $canID 			= IniFile_ReadKeyInSection($g_System_Config_File,$g_DUT_Station,"canID");
  $g_Config_excelFile 	= IniFile_ReadKeyInSection($g_System_Config_File,$g_DUT_Station,"Seq_excelFile");
  call LoadingFixConfig(); //加载夹具控制配置文件
  $View_TXT_String="fix power On  INIT";
  call Method_View_TXT_Process_Main();
  // fix power On 
  call Fixtures_24V_On();
  // Load box INIT
  UpdateStatus("~~~~~~~~~~~~~ Load box INIT ~~~~~~~~~~");
  //~ OperatorPrompt("LoadBoxOpen", "OK");
  call LoadBoxOpen();
  //~ call LoadBoxResetSW();
  
  // 测试仪器初始化
  call Init_DAQ6509();
  call Init_IT6722();
  call Init_DM6510();
  call RIGOL_DG5072_Initialize();
 // CAN 初始化
  call Init_ZLG_USBCANFD();
  call Read_ZLG_USBCANFD_Info();

  call CanHubOpen();
  call Cylinder_Initialize();

  
  //~ OperatorPrompt("cell 1", "OK");
  return;
}

function GlobalCleanup()
{
  $View_TXT_String="GlobalCleanup";
  call Method_View_TXT_Process_Main();
  call Cylinder_Initialize();
  call Close_ZLG_USBCANFD();  
  call CanHubClose();
  call LoadBoxClose();
  call Close_IT6722();
  call Close_DM6510();
  call RIGOL_DG5072_Close();
  End;
}


function OnAbort()
{
  $View_TXT_String="GlobalCleanup";
  call Method_View_TXT_Process_Main();
  ///Release the fixture and the product will be disconnected from the power supply at PostUUT finish

  //~ call Cylinder_Initialize();//测试完成打开夹具
  End;
}
function OnFail()
{
  $View_TXT_String="OnFail";
  call Method_View_TXT_Process_Main();
  ///Release the fixture and the product will be disconnected from the power supply at PostUUT finish

  //~ call Cylinder_Initialize();//测试完成打开夹具

  End;
}
function PostUUT()
{
  $View_TXT_String="PostUUT";
    call Method_View_TXT_Process_Main();
    ///Release the fixture and the product will be disconnected from the power supply at PostUUT finish
    SetTestName("PostUUT");
    //~ call DUT_POWER_OFF();
    call Fixtures_LoadBox_LoadOff();
    call LoadBoxResetSW(); 
    call Cylinder_Initialize();//测试完成打开夹具
    call RIGOL_DG5072_Channel1_OutOff();
    call RIGOL_DG5072_Channel2_OutOff();
    if( $g_Testdebug)
    {
    OperatorPrompt("PostUUT", "OK");
    }
  End;
}
//~~~每次测试前将执行这个线程
function PreUUT()
{
  $View_TXT_String="PreUUT";
  call Method_View_TXT_Process_Main();
    SetTestName("PreUUT");
  // Fixture control, product power-on and other initial actions will be completed in PreUUT//
  call Fix_Start();			//夹具启动
  call LINSW_RESET();			//复位LIN Switch 让其全部断开
  call Fixtures_LoadBox_LoadOff(); //断开负载箱负载接地和上拉
  call LoadBoxResetSW(); 		// 所有负载继电器复位
  call CANHubReset();			//复位CAN CH1 Switch 让其全部断开
  //~ call POWER_ON_IT6722();
  call DUT_POWER_ON();		
  call RIGOL_DG5072_Channel2_OutOff();
  call RIGOL_DG5072_Channel1_OutOff();
  SleepMilliseconds(500);
  
  call Add_ZLG_USBCANFD_AutoCAN(); // 设置心跳
  call ZLG_USBCANFD_AutoCAN_Enable();
      if( $g_Testdebug)
  {
     OperatorPrompt("PreUUT", "OK");
  }
  return;
}

//****Automation Loop, auto check and start cell
function AutomationLoop()
{
    
    $Cell_Status_1= GetTestCellStatus(1);
    // Cell1 start button check
    if($Cell_Status_1!="RUNNING")
    {
	$Count_1 = 0;
	while($Count_1<=5)
	{
	    $Fixture_Start_Status_1 = NI_DAQmx_Read_Dig_Port_Line($DeviceName,$StartButtom1Port,$StartButtom1Line,"Fixture_Start_1");
	    $Fixture_Start_Status_2 = NI_DAQmx_Read_Dig_Port_Line($DeviceName,$StartButtom2Port,$StartButtom2Line,"Fixture_Start_1");
	    
	    UpdateStatus($Fixture_Start_Status_1); 
	    UpdateStatus($Fixture_Start_Status_2); 
	    $Fixture_Start_Result_1_Boolean = NumericComparison($Fixture_Start_Status_1, 0, "=="); 
	    $Fixture_Start_Result_2_Boolean = NumericComparison($Fixture_Start_Status_2, 0, "=="); 
	    $Fixture_Start_Result_All_Boolean = Logical_AND( $Fixture_Start_Result_1_Boolean,$Fixture_Start_Result_2_Boolean);
	    if($Fixture_Start_Result_All_Boolean)
	    {
		$Count_1 = $Count_1 + 1; 
		SleepMilliseconds(20);	
	    }
	    if($Fixture_Start_Result_All_Boolean==false)
	    {
		break;
	    }			
	}
	if($Count_1>=6)
	{   
	    StartTestCell(1);
	}
    }
   
    End;	
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Power ON OFF DUT Functions//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function DUT_POWER_ON()
{
  call POWER_ON_IT6722();
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  call Fixtures_LoadBox_LoadOn();
  return;
}

function DUT_POWER_OFF()
{
  call POWER_OFF_IT6722();
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_OFF();
  call Fixtures_LoadBox_LoadOff();
  return;
}
function Restart_DUT()
{
    $View_TXT_String="Restart";
    call Method_View_TXT_Process_Main();      
    //~ SleepMilliseconds(500);
    call Soft_Restart();
    SleepMilliseconds(5000);
    //~ call into_1101();
    call INTO_1001();
  SleepMilliseconds(200);
    call INTO_1003();
  SleepMilliseconds(200);
    call INTO_1060();
  SleepMilliseconds(200);
    call INTO_2701();
    call INTO_2702();
    //~ SleepMilliseconds(500);
    call DUT_ALL_DO_Off();
    return;
 }



// 主唤醒控制
function J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON()
{
    SetTestName("UUT Waken");
  //~ //J2 PIN-1 J_DI_KL15_BackUp_HS to VBAT+
  NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line0", "1", $PowerTask);
  //J1 PIN-6 J_DI_BrakeSw1_HS to VBAT+
  NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line1", "1", $PowerTask);
  return;
}


function J1_PIN_6_DI_BrakeSw_MAIN_Waken_OFF()
{
//~ //J2 PIN-1 J_DI_KL15_BackUp_HS to VBAT+
NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line0", "0", $PowerTask);
//J1 PIN-6 J_DI_BrakeSw1_HS to VBAT+
NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line1", "0", $PowerTask);
  return;
}


function LINSW_RESET()
{
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line3", "0", $PowerTask);
    //J1 PIN-6 J_DI_BrakeSw1_HS to VBAT+
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line4", "0", $PowerTask);
    //J1 PIN-6 J_DI_BrakeSw1_HS to VBAT+
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line5", "0", $PowerTask);
    //J1 PIN-6 J_DI_BrakeSw1_HS to VBAT+
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line6", "0", $PowerTask);
    //J1 PIN-6 J_DI_BrakeSw1_HS to VBAT+
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line7", "0", $PowerTask);
  return;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~HW Controls Functions LoadBox ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function LoadBoxOpen()
{
  $g_LoadBox_Port = ReadIniFile($g_System_Config_File,"HW_Config","LoadBoxPort");
  UpdateStatus($g_LoadBox_Port);
 $g_LoadBox_Handle = Serial_Open($g_LoadBox_Port,19200,8,"N",1);
 //~ $g_LoadBox_Handle
  return;
}

function LoadBoxClose()
{
  Serial_Close($g_LoadBox_Handle);
  return;
}
function LoadBoxResetSW()
{ 
    //Board 1 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"4MSET0000000000000000$","OK",500);
  if(!$result)
  {
    Fail("LoadBox Board 1 Reset FAIL");
    UpdateStatus($returned);
  }
  //Board 2 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"5MSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 2 Reset FAIL");
  }
  //Board 3 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"6MSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 3 Reset FAIL");
  }
  //Board 4 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"7MSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 4 Reset FAIL");
  }
     //Board 5 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"8MSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 5 Reset FAIL");
  }
     //Board 6 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"9MSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 6 Reset FAIL");
  } 
     //Board 7 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"AMSET0000000000000000$","OK",500);
  UpdateStatus($returned);
  if(!$result)
  {
   UpdateStatus($returned);
    Fail("LoadBox Board 7 Reset FAIL");
  }
   //Board 8 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"BMSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 8 Reset FAIL");
  }
  
  //Board 9 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"CMSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 9 Reset FAIL");
  }
  //Board 9 Reset
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"DMSET0000000000000000$","OK",500);
  if(!$result)
  {
    UpdateStatus($returned);
    Fail("LoadBox Board 10 Reset FAIL");
  }
  return;
}
function Fixtures_LoadBox_LoadOn()// 连接所有负载接地和上拉
{
  $g_Fixtures_Power_Port = ReadIniFile($g_System_Config_File,"HW_Config","Fixtures_Power_Port");
  UpdateStatus($g_Fixtures_Power_Port);
  ( $g_Fixtures_Power_Handle, $success) = Serial_OpenBool($g_Fixtures_Power_Port,9600,8,"N",1);
  if(!$success)
  {
      UpdateStatus($result);
      Fail("Open Fixtures_Power_Port FAILED");
  }
  //Set DC Power On
  ($returned,$result) = Serial_SendMillisecondsBool($g_Fixtures_Power_Handle,"#PWR2ON$","5V ON",1000);
  if(!$result)
  {
    Fail("PMU DC 5V ON FAIL");
  }
  UpdateStatus($returned);
  Serial_Close($g_Fixtures_Power_Handle);
  return;
}
function Fixtures_LoadBox_LoadOff() // 断开所有负载接地和上拉
{
  $g_Fixtures_Power_Port = ReadIniFile($g_System_Config_File,"HW_Config","Fixtures_Power_Port");
  UpdateStatus($g_Fixtures_Power_Port);
  ( $g_Fixtures_Power_Handle, $success) = Serial_OpenBool($g_Fixtures_Power_Port,9600,8,"N",1);
  if(!$success)
  {
      UpdateStatus($result);
      Fail("Open Fixtures_Power_Port FAILED");
  }
  //Set DC Power On
  ($returned,$result) = Serial_SendMillisecondsBool($g_Fixtures_Power_Handle,"#PWR2OFF$","5V OFF",500);
  if(!$result)
  {
    Fail("PMU DC 5V Off FAIL");
  }
  UpdateStatus($returned);
  Serial_Close($g_Fixtures_Power_Handle);
  return;
}














//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~HW Controls Functions Fixture Power ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function Fixtures_24V_Off()
{
  $g_Fixtures_Power_Port = ReadIniFile($g_System_Config_File,"HW_Config","Fixtures_Power_Port");
  UpdateStatus($g_Fixtures_Power_Port);
  ( $g_Fixtures_Power_Handle, $success) = Serial_OpenBool($g_Fixtures_Power_Port,9600,8,"N",1);
  if(!$success)
  {
      UpdateStatus($result);
      Fail("Open Fixtures_Power_Port FAILED");
  }
  //Set 24 Power On
  ($returned,$result) = Serial_SendMillisecondsBool($g_Fixtures_Power_Handle,"#PWR1OFF$","24V ON",500);
  if(!$result)
  {
    Fail("PMU DC 24V OFF FAIL");
  }
  
  UpdateStatus($returned);
  Serial_Close($g_Fixtures_Power_Handle);
  return;
}
function Fixtures_24V_On()
{
  $g_Fixtures_Power_Port = ReadIniFile($g_System_Config_File,"HW_Config","Fixtures_Power_Port");
  UpdateStatus($g_Fixtures_Power_Port);
  ( $g_Fixtures_Power_Handle, $success) = Serial_OpenBool($g_Fixtures_Power_Port,9600,8,"N",1);
  if(!$success)
  {
      UpdateStatus($result);
      Fail("Open Fixtures_Power_Port FAILED");
  }
  
   //Set AC Power ON
  ($returned,$result) = Serial_SendMillisecondsBool($g_Fixtures_Power_Handle,"#START$","PWR Started",500);
  if(!$result)
  {
    Fail("PMU DC AC PWR ON FAIL");
  }

 
  //Set DC Power On
  ($returned,$result) = Serial_SendMillisecondsBool($g_Fixtures_Power_Handle,"#PWR1ON$","24V ON",500);
  if(!$result)
  {
    Fail("PMU DC 24V ON FAIL");
  }
  UpdateStatus($returned);
  Serial_Close($g_Fixtures_Power_Handle);
  return;
}





//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Test Functions//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function INTO_1001()
{
    $View_TXT_String="INTO_1001";
    call Method_View_TXT_Process_Main();
    $MeasurementName="INTO_1001";
    $CANFD_SEND_LOOP=2;
    $Rev_Delay=500;
    $CAN_Send_Msg = "02 10 01 CC CC CC CC CC";
    $CAN_Rev_ExpMsg = "50 01";
    call CANFD_SendMillisecondsMultiWait();
    
    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_SEND";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);
    return;
}

function Soft_Restart()
{
    $View_TXT_String="Soft_Restart";
    call Method_View_TXT_Process_Main();
    $CAN_Send_Msg = "02 11 01 CC CC CC CC CC";
    $CAN_Rev_ExpMsg = "02 51 01 ";
    $MeasurementName = "Soft_Restart";
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(2000);
    //~ OperatorPrompt($MeasurementName, "OK");
    call ZLG_CANFD_Rev();
    //~ $CAN_Rev_Msg = StringLookup("ID:07A1,data",$CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    UpdateStatus($CAN_Rev_Msg);
    UpdateStatus( $Result);
    RecordMeasurementPassFail($MeasurementName, $Result, "Bool", true, $Result);
    return;
}

function INTO_1003()
{
    $View_TXT_String="into_1003";
    call Method_View_TXT_Process_Main();  
    $CANFD_SEND_LOOP=2;
    $Rev_Delay=20;
    $CAN_Send_Msg = "02 10 03 00 00 00 00 00";
    $CAN_Rev_ExpMsg = "50 03";
    $MeasurementName = "INTO_1003";
    call CANFD_SendMillisecondsMultiWait();
    
    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
  
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);
    return;
 }

function Read_SW_VER_F189()
{  
  $View_TXT_String="Read_SW_VER_F189";
  call Method_View_TXT_Process_Main(); 
  $CAN_Send_Msg = "03 22 F1 89 CC CC CC CC";
  $CAN_Rev_ExpMsg = "F1 89";
  $MeasurementName = "Read_SW_VER_F189";
    $CANFD_SEND_LOOP=2;
    $Rev_Delay=20;
  call CANFD_SendMillisecondsMultiWait();
  
  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }

  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail ("SW_VER_F189_RECE", $CAN_Rev_Msg, "Bool",true,$Result);
  if($Result)
  {
    $returnStr = StringParse($CAN_Rev_Msg,$CAN_Rev_ExpMsg , "AA");
    $returnSt= StringTrim($returnStr);
    $returnStr = HexStringToString($returnStr, " ");
    UpdateStatus($returnStr);

    $Software_version= IniFile_ReadKeyInSection($g_System_Config_File,$g_DUT_Station,"Software_version");
    $Software_version= StringTrim($Software_version);
    $Result = StringComparison($returnStr,$Software_version,"==")
    RecordMeasurementPassFail ("SW_VER_F189", $returnStr, "Bool",true,$Result);
  }
  return;
 }

function Read_HW_VER_F17F()
{  
   $View_TXT_String="Read_HW_VER_F17F";
  call Method_View_TXT_Process_Main(); 
  $CAN_Send_Msg = "03 22 F1 7F CC CC CC CC";
  $CAN_Rev_ExpMsg = "F1 7F";
  $MeasurementName = "Read_HW_VER_F17F";
  call CANFD_SendMillisecondsMultiWait();
      $CANFD_SEND_LOOP=2;
    $Rev_Delay=50;

  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);
  if($Result)
  {
    $returnStr = StringParse($CAN_Rev_Msg,$CAN_Rev_ExpMsg , "AA");
    $returnSt= StringTrim($returnStr);
    $returnStr = HexStringToString($returnStr, " ");
    //~ UpdateStatus($returnStr);

    $HW_version= IniFile_ReadKeyInSection($g_System_Config_File,$g_DUT_Station,"HW_version");
    $HW_version= StringTrim($HW_version);
    $Result =StringContains($returnStr,$HW_version);
    UpdateStatus($returnStr);
    UpdateStatus($HW_version);
    
    //~ $Result = StringComparison($returnStr,$HW_version,"==")
    RecordMeasurementPassFail ("SW_HW_F17F", $returnStr, "Bool",true,$Result);
  }
    return;
 }

 
 function Read_Basic_SW_ver()
{  
  
  $View_TXT_String="Read_Basic_SW_ver";
  call Method_View_TXT_Process_Main(); 
  $CAN_Send_Msg = "03 22 A5 F0 CC CC CC CC";
  $factory_mode_Start = ReadIniFile($g_System_Config_File,$g_DUT_Station,"factory_mode_Start");
  $CAN_Rev_ExpMsg = "A5 F0";
  $MeasurementName = "Basic_software_version";
      $CANFD_SEND_LOOP=2;
    $Rev_Delay=50;
  call CANFD_SendMillisecondsMultiWait();
  

  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);
  if($Result)
  { 
    $returnStr = StringCut($CAN_Rev_Msg,"A5 F0 ",30);
    $returnStr = HexStringToString($returnStr, " ");
    UpdateStatus($MeasurementName);
    UpdateStatus($returnStr);
    //~ $CAN_Rev_Msg = StringLookup("ID:07A1,data",$CAN_Rev_Msg);
    //~ $software_version ="V30.04.000";
    $Basic_software_version= IniFile_ReadKeyInSection($g_System_Config_File,$g_DUT_Station,"Basic_software_version");
    $Result = StringComparison($returnStr,$Basic_software_version,"==")
    RecordMeasurementPassFail ($MeasurementName, $returnStr, "Bool",true,$Result);
  }
  return;
 }
function Read_Boot_SW_ver()
{  
    
    $View_TXT_String="Read_Boot_SW_ver";
    call Method_View_TXT_Process_Main(); 
    $CAN_Send_Msg = "03 22 F1 80 CC CC CC CC";
    $CAN_Rev_ExpMsg = "F1 80 ";
    $MeasurementName = "CHECK_Boot_software";
    call CANFD_SendMillisecondsMultiWait();
    $CANFD_SEND_LOOP=2;
    $Rev_Delay=50;

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);
    if($Result)
    { 
	$returnStr = StringCut($CAN_Rev_Msg,$CAN_Rev_ExpMsg,51);
	$returnStr = HexStringToString($returnStr, " ");
	UpdateStatus($MeasurementName);
	UpdateStatus($returnStr);
	//~ $CAN_Rev_Msg = StringLookup("ID:07A1,data",$CAN_Rev_Msg);
	$Boot_software = IniFile_ReadKeyInSection($g_System_Config_File,$g_DUT_Station,"Boot_software");
	$Result = StringComparison($returnStr,$Boot_software,"==")
	RecordMeasurementPassFail ($MeasurementName, $returnStr, "Bool",true,$Result);
    }
  return;
 } 

 
 
 function INTO_1060()
{
    $View_TXT_String="INTO_1060";
    call Method_View_TXT_Process_Main(); 
    $CAN_Send_Msg = "02 10 60 CC CC CC CC CC";
    $CAN_Rev_ExpMsg = "50 60";
    $MeasurementName = "INTO_1060";
    $CANFD_SEND_LOOP=2;
    $Rev_Delay=50;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);
    return;
 }
function INTO_2701()
{
    $View_TXT_String="INTO_2701";
    call Method_View_TXT_Process_Main();   
    //所有测试前,一定要进入EOL测试模式.
    $CAN_Send_Msg = "02 27 01 CC CC CC CC CC";
    $CAN_Rev_ExpMsg = "67 01";
      $CANFD_SEND_LOOP=2;
    $Rev_Delay=50;

    $MeasurementName = "INTO_2701";
    call CANFD_SendMillisecondsMultiWait();
    
 
    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);		
    return;
  }
function INTO_2702()
{
    $View_TXT_String="INTO_2702";
    call Method_View_TXT_Process_Main();     
  //所有测试前,一定要进入EOL测试模式.
    $CAN_Send_Msg = "06 27 02 00 01 02 03 CC";
    $CAN_Rev_ExpMsg = "67 02";
    $MeasurementName = "INTO_2702";
    $CANFD_SEND_LOOP=2;
    $Rev_Delay=50;
    call CANFD_SendMillisecondsMultiWait();
    

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);			
	return;
  }
function Write_PCBA_SN()
{	
    $View_TXT_String="Write_PCBA_SN";
    call Method_View_TXT_Process_Main();   
    $SN = "31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36";
    $CAN_Send_Msg = "00 13 2E F1 8C " + $SN + " CC CC CC";
    //$CAN_Send_Msg = "00 13 2E F1 8C 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 CC CC CC";
    $CAN_Rev_ExpMsg = "F1 8C";
    $MeasurementName = "Write_PCBA_SN";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=200;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);	
    return;
}
function Read_PCBA_SN()
{
    $View_TXT_String="Read_PCBA_SN";
    call Method_View_TXT_Process_Main();   
    //产品序列号只需在程序烧录台写入即可，FCT/EOL不需写入
    $CAN_Send_Msg = "03 22 F1 8C CC CC CC CC";
    $CAN_Rev_ExpMsg = $SN;		//"00 13 62 F1 8C";
    $MeasurementName = "Read_PCBA_SN";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=200;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);		
    return;
 }

 

 function write_factory_mode_start()
{
    // 只需在FCT和EOL工位写入 
    // 1,FCT: 开始测试写入值1F，并读取检查，测试完成后写入值1E，并读取检查; 
    // 2,EOL: 开始测试写入值1D，并读取检查，测试完成后写入值10，并读取检查; 
    // 备注: 读取检查前需要断电重启或者软重启(11 01);
     $View_TXT_String="write_factory_mode_start";
  call Method_View_TXT_Process_Main();      

   
     $factory_mode_Start = ReadIniFile($g_System_Config_File,$g_DUT_Station,"factory_mode_Start");
    $CAN_Send_Msg = "04 2E A5 F2 "+$factory_mode_Start +" CC CC CC";
    $Temp="factory_mode_end"+$CAN_Send_Msg;
    UpdateStatus($Temp);
   
    $CAN_Rev_ExpMsg = "A5 F2";
    $MeasurementName = "write_factory_mode_start";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=200;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);	
    return;
 }
function write_factory_mode_end()
{
    // 只需在FCT和EOL工位写入 
    // 1,FCT: 开始测试写入值1F，并读取检查，测试完成后写入值1E，并读取检查; 
    // 2,EOL: 开始测试写入值1D，并读取检查，测试完成后写入值10，并读取检查; 
    // 备注: 读取检查前需要断电重启或者软重启(11 01);
        $View_TXT_String="write_factory_mode_end";
  call Method_View_TXT_Process_Main();      

    $CAN_Send_Msg ="";
     $factory_mode_end = ReadIniFile($g_System_Config_File,$g_DUT_Station,"factory_mode_end");
   
    $CAN_Send_Msg = "04 2E A5 F2 "+$factory_mode_end +" CC CC CC";
   $Temp="factory_mode_end"+$CAN_Send_Msg;
    UpdateStatus($Temp);
   
    $CAN_Rev_ExpMsg = "A5 F2";
    $MeasurementName = "write_factory_mode_end";

    $CANFD_SEND_LOOP=3;
    $Rev_Delay=200;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);	
    return;
 }

function read_factory_mode_start()
{
    // 只需在FCT和EOL工位写入 
    // 1,FCT: 开始测试写入值1F，并读取检查，测试完成后写入值1E，并读取检查; 
    // 2,EOL: 开始测试写入值1D，并读取检查，测试完成后写入值10，并读取检查; 
    // 备注: 读取检查前需要断电重启或者软重启(11 01);
           $View_TXT_String="read_factory_mode_start";
  call Method_View_TXT_Process_Main();  
   
     $factory_mode_Start = ReadIniFile($g_System_Config_File,$g_DUT_Station,"factory_mode_Start");
    $CAN_Send_Msg = "03 22 A5 F2 " +"CC CC CC CC";
    $CAN_Rev_ExpMsg = "A5 F2 "+$factory_mode_Start;
    $MeasurementName = "read_factory_mode_Start";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=1500;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);	
    return;
 }
function read_factory_mode_end()
{
    // 只需在FCT和EOL工位写入 
    // 1,FCT: 开始测试写入值1F，并读取检查，测试完成后写入值1E，并读取检查; 
    // 2,EOL: 开始测试写入值1D，并读取检查，测试完成后写入值10，并读取检查; 
    // 备注: 读取检查前需要断电重启或者软重启(11 01);
    $View_TXT_String="read_factory_mode_end";
    call Method_View_TXT_Process_Main();  
    $CAN_Send_Msg ="";
     $factory_mode_end = ReadIniFile($g_System_Config_File,$g_DUT_Station,"factory_mode_end");
   
    $CAN_Send_Msg = "03 22 A5 F2 " +"CC CC CC CC";
   $Temp="READ factory_mode_end="+$CAN_Send_Msg;
    UpdateStatus($Temp);
   
    $CAN_Rev_ExpMsg = "A5 F2 "+$factory_mode_end;
    $MeasurementName = "read_factory_mode_end";

    $CANFD_SEND_LOOP=3;
    $Rev_Delay=200;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);	
    return;
 }
 

 function write_power_mode()
 {
     //~ 只需在EOL工位写入，并且需要在 EOL其他功能都测试完后再写入 
     //~ 写: 2E A5 F7 [状态值]; 电源模式状态 0x0A5F7 2E/22 读写 1 
     //~ 1,EOL: 写入值0x00，并读取检查 ; 
     //~ 读: 22 A5 F7 备注: 读取检查前需要断电重启或者软重启 (11 01);
        $View_TXT_String="write_power_mode";
    call Method_View_TXT_Process_Main();  

    $CAN_Send_Msg = "04 2E A5 F7 00 CC CC CC";
    $CAN_Rev_ExpMsg = "A5 F7";
    $MeasurementName = "write_power_mode";

    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(1000);
    call ZLG_CANFD_Rev();
    //~ $CAN_Rev_Msg = StringLookup("ID:07A1,data",$CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    //~ UpdateStatus("====== 50 03?=========");
    //~ UpdateStatus( $Result);

    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
   
    return;
  }
 
  function read_power_mode()
 {
     //~ 只需在EOL工位写入，并且需要在 EOL其他功能都测试完后再写入 
     //~ 写: 2E A5 F7 [状态值]; 电源模式状态 0x0A5F7 2E/22 读写 1 
     //~ 1,EOL: 写入值0x00，并读取检查 ; 
     //~ 读: 22 A5 F7 备注: 读取检查前需要断电重启或者软重启 (11 01);
            $View_TXT_String="read_power_mode";
    call Method_View_TXT_Process_Main();  
    $CAN_Send_Msg = "03 22 A5 F7 CC CC CC CC";
    $CAN_Rev_ExpMsg = "A5 F7 00";
    $MeasurementName = "READ_POWER_MODE";
    $Result =false;
    $loop = 0;
    while($Result!=true && $loop<10)
    {
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(200);
    call ZLG_CANFD_Rev();
    //~ $CAN_Rev_Msg = StringLookup("ID:07A1,data",$CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    //~ UpdateStatus("====== 50 03?=========");
    //~ UpdateStatus( $Result);
    $loop = $loop+1;
    }
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
   
    return;
  }
  
  function Write_CAR_MODE()
 {
    // 只需在EOL工位写入 1,EOL: 写入值0x05，并读取检查; 
    //	备注: 读取检查前需要断电重启或者软重启(11 01);
    $View_TXT_String="Write_Car_Model";
    call Method_View_TXT_Process_Main();  
    $CAN_Send_Msg = "00 13 2E CF 08 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 CC CC CC";
    $CAN_Rev_ExpMsg = "CF 08";
    $MeasurementName = "Write_CAR_MODE";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=1500;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
	$MeasName_ = $MeasurementName+"_SEND";
	RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);			
    return;
 }
function READ_CAR_MODE()
 {
       $View_TXT_String="READ_CAR_MODE";
    call Method_View_TXT_Process_Main();  
    $CAN_Send_Msg = "03 22 CF 08 CC CC CC CC";
    $CAN_Rev_ExpMsg = "CF 08 02";
    $MeasurementName = "READ_Car_Model";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=2000;
    call CANFD_SendMillisecondsMultiWait();
  
    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);			
    return;
 }
function Write_ECU_offline_date()
{
  $View_TXT_String="Write_ECU_offline_date";
  call Method_View_TXT_Process_Main(); 
  //只需在EOL台写入，其他不需要 日期信息是BCD码，如20221016则为0x20 0x22 0x10 0x16
  ($month,$day,$year,$hour,$min,$sec,$dayOfWeek) = SystemTime();
  $year_befor = StringSub($year,0,2);
   $year_aftre = StringSub($year,2,2);
   $length = StringLength($month);
   $result = NumericComparison($length, 1, "==");
   if($result)
   {
      $month="0"+$month;
    }
   $length = StringLength($day);
   $result = NumericComparison($length, 1, "==");
   if($result)
   {
      $day="0"+$day;
    }
        
    UpdateStatus($month);
    UpdateStatus($day);
    UpdateStatus($year);
    $CAN_Send_Msg = "07 2E F1 8B "+$year_befor+" "+$year_aftre+" "+$month+" "+$day;
    $CAN_Rev_ExpMsg = "F1 8B";
    $MeasurementName = "WRITE_ECU_OFFLINE_DATA";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=1000;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
	$MeasName_ = $MeasurementName+"_SEND";
	RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);	
    //~ End;
    return;
 }
function Read_ECU_offline_date()
{
  $View_TXT_String="Read_ECU_offline_date";
  call Method_View_TXT_Process_Main(); 
    //只需在EOL台写入，其他不需要 日期信息是BCD码，如20221016则为0x20 0x22 0x10 0x16
  ($month,$day,$year,$hour,$min,$sec,$dayOfWeek) = SystemTime();
  $year_befor = StringSub($year,0,2);
   $year_aftre = StringSub($year,2,2);
   $length = StringLength($month);
   $result = NumericComparison($length, 1, "==");
   if($result)
   {
      $month="0"+$month;
    }
   $length = StringLength($day);
   $result = NumericComparison($length, 1, "==");
   if($result)
   {
      $day="0"+$day;
    }
        
    UpdateStatus($month);
    UpdateStatus($day);
    UpdateStatus($year);
    //~ $CAN_Send_Msg = "07 2E F1 8B "+$year_befor+" "+$year_aftre+" "+$month+" "+$day;
    
    $CAN_Send_Msg = "03 22 F1 8B CC CC CC CC";
    $CAN_Rev_ExpMsg = "F1 8B"+" "+$year_befor+" "+$year_aftre+" "+$month+" "+$day;
    $MeasurementName = "Read_ECU_offline_date";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=20;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);		
    return;
 }

 

 function ALl_LIN_Mode_On()
{
  
    UpdateStatus("=>>>>>>>>>>>>>>>>>> ALl_LIN_Mode_On>>>>>>>>>>>>>>>");
    
    $CAN_Send_Msg = "04 31 01 C0 8A 3F CC CC";
    $CAN_Rev_ExpMsg = "F1 8A";	
    $MeasurementName = "ALl_LIN_Mode_On";
    $CANFD_SEND_LOOP=3;
    $Rev_Delay=200;
    call CANFD_SendMillisecondsMultiWait();
    if($Result)
    {
      $CAN_Rev_Msg =StringParse($CAN_Rev_Msg, "data:", ";");
    }
    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);			
    return;
}
function LIN_Mode_1_Result()
{
  
    UpdateStatus("=>>>>>>>>>>>>>>>>>> LIN_Mode_1_Result>>>>>>>>>>>>>>>");
  
    $CAN_Send_Msg = "04 31 03 C0 8A 01 CC CC";
    $CAN_Rev_ExpMsg = "C0 8A";	
    $MeasurementName = "LIN_Mode_1_Result";
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(50);
    call ZLG_CANFD_Rev();
    UpdateStatus($CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
}
function LIN_Mode_2_Result()
{
  
    UpdateStatus("=>>>>>>>>>>>>>>>>>> LIN_Mode_2_Result>>>>>>>>>>>>>>>");
    $CAN_Send_Msg = "04 31 03 C0 8A 02 CC CC";
    $CAN_Rev_ExpMsg = "C0 8A";	
    $MeasurementName = "LIN_Mode_2_Result";
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(50);
    call ZLG_CANFD_Rev();
    UpdateStatus($CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
}

function LIN_Mode_3_Result()
{
  
    UpdateStatus("=>>>>>>>>>>>>>>>>>> LIN_Mode_3_Result>>>>>>>>>>>>>>>");
    $CAN_Send_Msg = "04 31 03 C0 8A 04 CC CC";
    $CAN_Rev_ExpMsg = "C0 8A";	
    $MeasurementName = "LIN_Mode_3_Result";
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(50);
    call ZLG_CANFD_Rev();
    UpdateStatus($CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
}
function LIN_Mode_4_Result()
{
  
    UpdateStatus("=>>>>>>>>>>>>>>>>>> LIN_Mode_4_Result>>>>>>>>>>>>>>>");
    $CAN_Send_Msg = "04 31 03 C0 8A 08 CC CC";
    $CAN_Rev_ExpMsg = "C0 8A";	
    $MeasurementName = "LIN_Mode_4_Result";
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(50);
    call ZLG_CANFD_Rev();
    UpdateStatus($CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
}
 
function LIN_Mode_5_Result()
{
  
    UpdateStatus("=>>>>>>>>>>>>>>>>>> LIN_Mode_5_Result>>>>>>>>>>>>>>>");
    $CAN_Send_Msg = "04 31 03 C0 8A 10 CC CC";
    $CAN_Rev_ExpMsg = "C0 8A";	
    $MeasurementName = "LIN_Mode_5_Result";
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(50);
    call ZLG_CANFD_Rev();
    UpdateStatus($CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
}
function LIN_Mode_6_Result()
{
  
    UpdateStatus("=>>>>>>>>>>>>>>>>>> LIN_Mode_6_Result>>>>>>>>>>>>>>>");
    $CAN_Send_Msg = "04 31 03 C0 8A 20 CC CC";
    $CAN_Rev_ExpMsg = "C0 8A";	
    $MeasurementName = "LIN_Mode_6_Result";
    call ZLG_CANFD_Send();//send can msg
    SleepMilliseconds(50);
    call ZLG_CANFD_Rev();
    UpdateStatus($CAN_Rev_Msg);
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasurementName, $CAN_Rev_Msg, "Bool", true, $Result);		
    return;
}


function CHECK_DCT_CODE()
{
  $EEPROM_DATA="01";
  $CAN_Send_Msg = "06 19 04 97 00 04 FF CC";
  $CAN_Rev_ExpMsg = "30 00";	
  $MeasurementName = "EEPROM_WRITE";
  $CANFD_SEND_LOOP=3;
  $Rev_Delay=1000;
  call CANFD_SendMillisecondsMultiWait();

  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);			
  return;

}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIN Test Functions//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function LIN_TEST()
{
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line3", "0", $PowerTask); // Lin 1 SW
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line4", "0", $PowerTask); // Lin 2 SW
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line5", "0", $PowerTask);// Lin 3 SW
    OperatorPrompt("LIN_TEST_TEST", "OK");
    SetTestName("LIN_TEST");
    call RFLIN_TEST();
    call J5_25_LIN_PWS_TEST();
    call J5_28_LIN_FKS_TEST();
    call J3_2_LIN_AGSEBS_TEST();
    return;
}


function RFLIN_TEST()
{
    UpdateStatus("=>>>>>>>>>>>>>>>>>> RFLIN_TEST>>>>>>>>>>>>>>>");
    $g_RF_LIN_Port = ReadIniFile($g_System_Config_File,"HW_Config","RF_LIN_Port");
    ( $g_RF_LIN_Handle, $success) = Serial_OpenBool($g_RF_LIN_Port,9600,8,"N",1);
    //~ ($g_RF_LIN_Handle, $success) = Serial_OpenWithLoggingBool($portNumber, $baudRate, $dataBits, $parity, $stopBits, "D:\\RF_LIN_LOG.txt");
     if(!$success)
    {
	UpdateStatus($result);
	Fail("Open Fixtures_Power_Port FAILED");
    }
    SleepMilliseconds(500);
    $returned = Serial_ReadExisting($g_RF_LIN_Handle ,5);
   
    $returned = StringToHexString($returned);
     UpdateStatus($returned);
    RecordMeasurementPassFail("RFLIN_TEST", $returned,"bool", true, $found);
       //~ Fail("RF LIN Test FAIL!");
    Serial_Close($g_RF_LIN_Handle);
    return;
}
function J5_25_LIN_PWS_TEST()
{
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line3", "1", $PowerTask);
    SleepMilliseconds(50);
    $g_LIN_Port = ReadIniFile($g_System_Config_File,"HW_Config","LIN_Port");
    ($g_LinHandle, $success) = Serial_OpenBool($g_LIN_Port,19200,8,"N",1)
    UpdateStatus("=>>>>>>>>>>>>>>>>>> J5_25_LIN_PWS_TEST>>>>>>>>>>>>>>>");
    if(!$success)
    {
    UpdateStatus($result);
    Fail("Open LIN_Port FAILED");
    }
    $LIN_Rev_ExpMsg="FB 00 55 C1";
    ($returned, $found) = Serial_SendBinaryMillisecondsBool($g_LinHandle, "", $LIN_Rev_ExpMsg, 5000);
    //~ $returned = StringToHexString($returned);
    UpdateStatus($returned);
    RecordMeasurementPassFail("J5_25_LIN_PWS_TEST", $returned,"bool", true, $found);
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line3", "0", $PowerTask);
     //~ Fail("RF LIN Test FAIL!");
    Serial_Close($g_LinHandle);
    return;
}
function J5_28_LIN_FKS_TEST()
{
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line4", "1", $PowerTask);
    SleepMilliseconds(50);
    $g_LIN_Port = ReadIniFile($g_System_Config_File,"HW_Config","LIN_Port");
    ($g_LinHandle, $success) = Serial_OpenBool($g_LIN_Port,19200,8,"N",1)
    SleepMilliseconds(1000);
    UpdateStatus("=>>>>>>>>>>>>>>>>>> J5_28_LIN_FKS_TEST>>>>>>>>>>>>>>>");
    if(!$success)
    {
	UpdateStatus($result);
	Fail("Open g_LIN_Port FAILED");
    }
    $LIN_Rev_ExpMsg=" 00 55 F5";
    ($returned, $found) = Serial_SendMillisecondsBool($g_LinHandle," ", $LIN_Rev_ExpMsg, 5000);
    $returned = StringToHexString($returned);
    RecordMeasurementPassFail("J5_28_LIN_FKS_TEST", $returned,"bool", true, $found);
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line4", "0", $PowerTask);
     //~ Fail("RF LIN Test FAIL!");
    Serial_Close($g_LinHandle);
    return;
}
function J3_2_LIN_AGSEBS_TEST()
{
  NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line5", "1", $PowerTask);
   OperatorPrompt("J3_2_LIN_AGSEBS_TEST_Debug!!!!", "OK");
  SleepMilliseconds(1000);
    $g_LIN_Port = ReadIniFile($g_System_Config_File,"HW_Config","LIN_Port");
    ($g_LinHandle, $success) = Serial_OpenBool($g_LIN_Port,19200,8,"N",1)
    UpdateStatus("=>>>>>>>>>>>>>>>>>> J3_2_LIN_AGSEBS_TEST>>>>>>>>>>>>>>>");
    if(!$success)
    {
    UpdateStatus($result);
    Fail("Open g_LIN_Port FAILED");
    }
    $LIN_Rev_ExpMsg="00 55 E7";
    ($returned, $found) = Serial_SendMillisecondsBool($g_LinHandle, "", "00", 1000);
    $returned = StringToHexString($returned);
    RecordMeasurementPassFail("J3_2_LIN_AGSEBS_TEST", $returned,"bool", true, $found);
    NI_DAQmx_Write_Dig_Port_Line($DeviceName, "port0", "line5", "0", $PowerTask);
     //~ Fail("RF LIN Test FAIL!");
    Serial_Close($g_LinHandle);
    return;
}
  

function EEPROM_WRITE()
{
  UpdateStatus("=>>>>>>>>>>>>>>>>>> EEPROM_WRITE>>>>>>>>>>>>>>>");
  
  $EEPROM_DATA="01";
   $CAN_Send_Msg = "05 31 01 C0 86 "+$EEPROM_DATA+" CC CC";
  $CAN_Rev_ExpMsg = "C0 86";	
  $MeasurementName = "EEPROM_WRITE";
  $CANFD_SEND_LOOP=3;
  $Rev_Delay=1000;
    call CANFD_SendMillisecondsMultiWait();

    if($Report_Mark_SendMessage_Enable)
    {
      $MeasName_ = $MeasurementName+"_SEND";
      RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
    }
    $MeasName_ = $MeasurementName+"_RECE";
    $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
    RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);			
  return;
}

function EEPROM_READ()
{
  UpdateStatus("=>>>>>>>>>>>>>>>>>> EEPROM_READ>>>>>>>>>>>>>>>");
  $EMMC_DATA="01";
  $CAN_Send_Msg = "04 31 03 C0 86 AA AA AA";
  $CAN_Rev_ExpMsg = "C0 86 "+$EEPROM_DATA;
  $MeasurementName = "EEPROM_READ";
  $CANFD_SEND_LOOP=3;
  $Rev_Delay=1000;
  call CANFD_SendMillisecondsMultiWait();

  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);		
  return;
}

function EMMC_WRITE()
{
  UpdateStatus("=>>>>>>>>>>>>>>>>>> EMMC_write>>>>>>>>>>>>>>>");
  $EMMC_DATA="01";
  $CAN_Send_Msg = "05 31 01 C0 87 "+$EMMC_DATA+" CC CC";
  $CAN_Rev_ExpMsg = "C0 87";	
  $MeasurementName = "EMMC_WRITE";
  $CANFD_SEND_LOOP=5;
  $Rev_Delay=1000;
  call CANFD_SendMillisecondsMultiWait();
  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);	
  return;
}

function EMMC_READ()
{
  UpdateStatus("=>>>>>>>>>>>>>>>>>> EMMC_read>>>>>>>>>>>>>>>");
  $EMMC_DATA="01";
  $CAN_Send_Msg = "04 31 03 C0 87 CC CC CC";
  $CAN_Rev_ExpMsg = "C0 87 "+$EMMC_DATA;	
  $MeasurementName = "EMMC_READ";
  $CANFD_SEND_LOOP=3;
  $Rev_Delay=1000;
  call CANFD_SendMillisecondsMultiWait();

  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);		
  return;
}

function DAC_Control()
{
  
  UpdateStatus("=>>>>>>>>>>>>>>>>>> Dac_Control>>>>>>>>>>>>>>>");
  
  $CAN_Send_Msg = "06 31 01 C0 88 00 00 CC";
  $CAN_Rev_ExpMsg = "C0 88";	
  $MeasurementName = "Dac_Control";
  $CANFD_SEND_LOOP=3;
  $Rev_Delay=20;
  call CANFD_SendMillisecondsMultiWait();

  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);		
  return;
}

function RKE_Control()
{
  //	function	startbit
  //	低频通道1    	01
  //	低频通道2	02
  //	低频通道3	03
  //	低频通道4	04
  //	低频通道5	05
  //	低频通道6	06
  UpdateStatus("=>>>>>>>>>>>>>>>>>> RKE_Control>>>>>>>>>>>>>>>");
  $CAN_Send_Msg = "05 31 01 C0 89 3F CC CC";
  $CAN_Rev_ExpMsg = "C0 89";	
  $MeasurementName = "RKE_Control";
  $CANFD_SEND_LOOP=3;
  $Rev_Delay=20;
  call CANFD_SendMillisecondsMultiWait();

  if($Report_Mark_SendMessage_Enable)
  {
    $MeasName_ = $MeasurementName+"_SEND";
    RecordMeasurementPassFail($MeasName_, $CAN_Send_Msg, "Bool", true, true);
  }
  $MeasName_ = $MeasurementName+"_RECE";
  $Result = StringContains($CAN_Rev_Msg,$CAN_Rev_ExpMsg);
  RecordMeasurementPassFail($MeasName_, $CAN_Rev_Msg, "Bool",true,$Result);			
  return;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~HW Controls Functions Sub CAN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function CanHubOpen()
{
  $g_Can_Hub_Port = ReadIniFile($g_System_Config_File,"HW_Config","Can_Hub_Port");
  UpdateStatus($g_Can_Hub_Port);
  ($g_CanHub_Handle,$result) = Serial_OpenBool($g_Can_Hub_Port,19200,8,"N",1);
  if(!$result)
  {
    Fail("Can_Hub Open Fail");
  }
  return;
}
function CanHubClose()
{
   Serial_Close($g_CanHub_Handle);
  return;
}
function PCAN_TEST()
{
  //switch to PCAN_TEST
 ($returned,$result)=Serial_SendMillisecondsBool ($g_CanHub_Handle,"[1CANS8]","Channel 8 on",500);
  if($result ==false)
  {
    UpdateStatus($result);
    Fail("CAN SW Channel 8 on FAIL");
  }
  SleepMilliseconds(500);
  call ZLG_CANFD_CH2_Rev();
  UpdateStatus($CAN_Rev_Msg);
  call CANHubReset();
  return;
}
function ICAN_TEST()
{
  //switch to ICAN_TEST
  ($returned,$result) = Serial_SendMillisecondsBool($g_CanHub_Handle,"[1CANS7]","Channel 7 on",500);
    if($result ==false)
  {
    UpdateStatus($result);
    Fail("CAN SW Channel 7 on FAIL");
  }
  SleepMilliseconds(500);
  call ZLG_CANFD_CH2_Rev();
  UpdateStatus($CAN_Rev_Msg);
  call CANHubReset();
  return;
}
function UWBCAN_TEST()
{
  //switch to UWBCAN_TEST
  ($returned,$result) = Serial_SendMillisecondsBool($g_CanHub_Handle,"[1CANS6]","Channel 6 on",500);
  if($result ==false)
  {
    UpdateStatus($result);
    Fail("CAN SW Channel 6 on FAIL");
  }
  UpdateStatus($result);
  SleepMilliseconds(500);
  call ZLG_CANFD_CH2_Rev();
  UpdateStatus($CAN_Rev_Msg);
  call CANHubReset();
  return;
}
function CAN_TEST()
{
  //switch to UWBCAN_TEST
  ($returned,$result) = Serial_SendMillisecondsBool($g_CanHub_Handle,"[1CANS5]","Channel 5 on",500);
    if($result ==false)
  {
    UpdateStatus($result);
    Fail("CAN SW Channel 5 on FAIL");
  }
  UpdateStatus($result);
  SleepMilliseconds(500);
  call ZLG_CANFD_CH2_Rev();
  UpdateStatus($CAN_Rev_Msg);
  call CANHubReset();
  return;
}
function CANHubReset()
{
  //CAN Hub Reset this can hub addr is 0x1
  ($returned,$result) = Serial_SendMillisecondsBool($g_CanHub_Handle,"[1CANS0]","ALL Channel off",500);
    if($result ==false)
  {
    UpdateStatus($result);
    Fail("[1CANS0] ,ALL Channel off FAIL");
  }
  return;
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DUT_Sleep/waken ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function SLEEP_WAKEN()
{
  
  
  return;
}


function SLEEP_WAKEN_TEST()
{
    SetTestName("Waken_Test");
    call ECAN_waken();
    SleepMilliseconds(200);
    call J9_2_DI_DriveDoorReleaseSW_LS_waken();
    SleepMilliseconds(200);
    call J9_4_DI_FLDoorUnlockSW_LS_waken();
    SleepMilliseconds(200);
    //~ call J9_22_J_DI_FLDoorAjarSW_LS_waken();
    //~ SleepMilliseconds(200);

    call J1_46_DI_EmergencyAlarmSw_LS_waken();
    SleepMilliseconds(200);
    call J9_3_DI_FLOutHandle_LS_waken();
    SleepMilliseconds(200);
    call J1_29_DI_RLDoorAjarSW_LS_waken();
    SleepMilliseconds(200);
    call J2_30_DI_RLDoorAjarSW_waken();
    SleepMilliseconds(200);
    call J1_44_DI_TrunkOpenSw_LS_waken();
    SleepMilliseconds(200);
    call J2_47_AI_ASCtrSw_waken();
    SleepMilliseconds(200);
    call J9_24_DI_CentralOpenLockSw_LS_waken();
    
    return;
}
function DUT_SLEEP()
{
  call LoadBoxResetSW();
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_OFF();
  call Fixtures_LoadBox_LoadOff();    
  call ZLG_USBCANFD_AutoCAN_Disable();
  $Loop=0;
  $Result=false;
  //~ OperatorPrompt("DUT_Sleep", "OK");
  while($Loop<70 && $Result==false)
  {
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      $Response =  NIVISA_Read($g_IT6722_handle);
      //~ UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.1, "<");
      $Loop=$Loop+1;
  }
    SleepMilliseconds(2000);
    NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
    SleepMilliseconds(50);
    $Response =  NIVISA_Read($g_IT6722_handle);
    UpdateStatus($Response); 
    $Response = CastVariable("Float",$Response);
    $DUT_Sleep_Result = NumericComparison($Response, 0.1, "<");
    return;
}
function ECAN_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String="ECAN_waken";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("DUT_Sleep", "OK");
  RecordMeasurementPassFail("ECAN_waken Sleep", $measurement, "bool", true, $DUT_Sleep_Result);
  if($Result)
  {
      UpdateStatus("ECAN_waken Sleep test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="ECAN_Sleep";
      call IT6722_Current();
  } 
  //ECAN_Waken
  SleepMilliseconds(2000);
  $CAN_Send_Msg = "02 10 03 00 00 00 00 00";
  $CAN_Rev_ExpMsg = "50 03";
  $MeasurementName = "into_1003";
  call ZLG_CANFD_Send();//send can msg
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("ECAN_Waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}

function J9_2_DI_DriveDoorReleaseSW_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String="J9_2_DI_DriveDoorReleaseSW_LS_Sleep";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  RecordMeasurementPassFail("J9_2_DI_DriveDoorReleaseSW_LS_Sleep", $measurement, "bool", true, $DUT_Sleep_Result);
  if($Result)
  {
      UpdateStatus("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken Sleep test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken";
      call IT6722_Current();
  } 
  //J9_2_DI_DriveDoorReleaseSW_LS_waken
  
  //J9_2_DI_DriveDoorReleaseSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH07$","OK",500);
  if(!$result)
  {
    Fail("J9_2_DI_DriveDoorReleaseSW_LS To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J9_2_DI_DriveDoorReleaseSW_LS_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}









function J9_4_DI_FLDoorUnlockSW_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String="J9_4_DI_FLDoorUnlockSW_LS_waken";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
RecordMeasurementPassFail("J9_4_DI_FLDoorUnlockSW_LS_Sleep", $measurement, "bool", true, $DUT_Sleep_Result);
  if($Result)
  {
      UpdateStatus("J9_4_DI_FLDoorUnlockSW_LS Sleep test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J9_4_DI_FLDoorUnlockSW_LS_sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH09$","OK",500);
  if(!$result)
  {
    Fail("J9_4_DI_FLDoorUnlockSW_LS To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J9_4_DI_FLDoorUnlockSW_LS_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}


function J9_22_J_DI_FLDoorAjarSW_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String="J9_22_J_DI_FLDoorAjarSW_LS_Sleep";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("ECAN_waken Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J9_22_J_DI_FLDoorAjarSW_LS Sleep test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J9_22_J_DI_FLDoorAjarSW_LS_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH10$","OK",500);
  if(!$result)
  {
    Fail("J9_2_DI_DriveDoorReleaseSW_LS To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J9_22_J_DI_FLDoorAjarSW_LS_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}





function J9_24_DI_CentralOpenLockSw_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String="J9_24_DI_CentralOpenLockSw_LS_waken_Sleep";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("J9_24_DI_CentralOpenLockSw_LS Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J9_24_DI_CentralOpenLockSw_LS_Sleep test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J9_24_DI_CentralOpenLockSw_LS_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH11$","OK",500);
  if(!$result)
  {
    Fail("J9_24_DI_CentralOpenLockSw_LS To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J9_24_DI_CentralOpenLockSw_LS_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}





function J1_46_DI_EmergencyAlarmSw_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String="J1_46_DI_EmergencyAlarmSw_LS_waken_Sleep";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("ECAN_waken Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J1_46_DI_EmergencyAlarmSw_LS_waken_Sleep test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J1_46_DI_EmergencyAlarmSw_LS_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH03$","OK",500);
  if(!$result)
  {
    Fail("J1_46_DI_EmergencyAlarmSw_LS_waken_Sleep To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J1_46_DI_EmergencyAlarmSw_LS_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}


function J9_3_DI_FLOutHandle_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String=" J9_3_ J_DI_FLOutHandle_LS_waken";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("ECAN_waken Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J9_3_J_DI_FLOutHandle_LS_waken test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J9_3_ J_DI_FLOutHandle_LS_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH08$","OK",500);
  if(!$result)
  {
    Fail("J9_3_DI_FLOutHandle_LS_waken To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J9_3_DI_FLOutHandle_LS_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}



function J1_29_DI_RLDoorAjarSW_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String=" J1_29_DI_DCULifeBeat_waken";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("J1_29_DI_DCULifeBeat_waken Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J1_29_DI_DCULifeBeat_waken test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J1_29_DI_DCULifeBeat_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH01$","OK",500);
  if(!$result)
  {
    Fail("J1_29_DI_DCULifeBeat_waken To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J1_29_DI_DCULifeBeat_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}






function J2_30_DI_RLDoorAjarSW_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String=" J2_30_DI_RLDoorAjarSW_waken";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("J2_30_DI_RLDoorAjarSW_waken Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J2_30_DI_RLDoorAjarSW_waken test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J2_30_DI_RLDoorAjarSW_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH04$","OK",500);
  if(!$result)
  {
    Fail("J2_30_DI_RLDoorAjarSW_waken To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J2_30_DI_RLDoorAjarSW_wakens", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}



function J1_44_DI_TrunkOpenSw_LS_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String=" J2_30_DI_RLDoorAjarSW_waken";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("J1_44_DI_TrunkOpenSw_LS_waken Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J1_44_DI_TrunkOpenSw_LS_waken test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J1_44_DI_TrunkOpenSw_LS_waken_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH02$","OK",500);
  if(!$result)
  {
    Fail("J1_44_DI_TrunkOpenSw_LS_waken To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J1_44_DI_TrunkOpenSw_LS_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}





function J2_47_AI_ASCtrSw_waken()
{
  //DUT_Sleep
  //~ SetTestName("DUT_Sleep/waken");
  $View_TXT_String=" J2_47_AI_ASCtrSw_waken";
  call Method_View_TXT_Process_Main();
  call DUT_SLEEP();
  //~ OperatorPrompt("J9_2_DI_DriveDoorReleaseSW_LS_Sleep_waken", "OK");
  if(!$DUT_Sleep_Result)
  {
      Fail("J2_47_AI_ASCtrSw_waken Sleep Failed!");
    }
  if($Result)
  {
      UpdateStatus("J2_47_AI_ASCtrSw_waken test PASS!");
      UpdateStatus($Response); 
      $Current_USL=0.02;
      $Current_LSL=0;
      $measureName="J2_47_AI_ASCtrSw_waken_Sleep";
      call IT6722_Current();
  } 

  //J9_4_DI_FLDoorUnlockSW_LS To GND
  ($returned,$result )= Serial_SendMillisecondsBool($g_LoadBox_Handle,"D1CH05$","OK",500);
  if(!$result)
  {
    Fail("J2_47_AI_ASCtrSw_waken 1.2K To GND FAIL");
    UpdateStatus($returned);
  }
  SleepMilliseconds(2000);
  $Loop=0;
  $Result=false;
  while($Loop<30 && $Result==false)
  {
      //~ OperatorPrompt("ECAN_Waken", "OK");
      SleepMilliseconds(1000);
      NIVISA_Write($g_IT6722_handle, "MEASure:CURRent?\n");
      SleepMilliseconds(50);
      $Response =  NIVISA_Read($g_IT6722_handle);
      UpdateStatus($Response); 
      $Response = CastVariable("Float",$Response);
      $Result = NumericComparison($Response, 0.3, ">");
      $Loop=$Loop+1;
  }
  RecordMeasurementPassFail("J2_47_AI_ASCtrSw_waken", $Result, "bool", true, true);
  call J1_PIN_6_DI_BrakeSw_MAIN_Waken_ON();
  //~ call Soft_restart();
  return;
}





//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Scan and check the bar code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  function UUT_Barcode_Scan()
{
  SetTestName("UUT_Barcode_Scan");  
  
  // 扫描枪串口参数
  $Scanner_BaudRate = New("Integer",115200);
  $Scanner_ByteSize = New("Integer",8);
  $Scanner_Parity = New("String","N");
  $Scanner_StopBits = New("Integer",1); 
  $ComportBarcodeScanner = ReadIniFile($g_System_Config_File,"HW_Config","BarcodeScanner");
  
  UpdateStatus("\n=========== UUT_Barcode_Scan ===========");  
  $ExpectedLength = 24;  
  $maxScanTimes = 5;
  $loopTimes = 0;
  Label lbl_BarcodeScanLoop:
  SleepMilliseconds(10);
  $loopTimes = $loopTimes + 1;
  if($loopTimes > $maxScanTimes)
  {
    $receiveBuffer = SerialSendBinaryMilliseconds($scanerPort,"16 55 0D","",600);
    SerialClose($scanerPort);
    $message = "Get UUT's Barcode Fail";
    RecordMeasurementPassFail($message,"FAIL","PASS/FAIL",false,false);
  }
  //let's get serialnumber
  $receiveBuffer = "";
  $scanerPort = SerialOpen($ComportBarcodeScanner,$Scanner_BaudRate,$Scanner_ByteSize,$Scanner_Parity,$Scanner_StopBits);
  // trigger read 
  $receiveBuffer = SerialSendBinaryMilliseconds($scanerPort,"16 54 0D","",600);
  SerialClose($scanerPort);
  UpdateStatus($receiveBuffer);
  //Replace \r\n
  //~ $receiveBuffer = StringReplace($receiveBuffer,"0D 0A","");
  $SerialNumber = HexStringToString($receiveBuffer," "); 
  $SerialNumber = StringTrim($SerialNumber);
  $SerialNumber = StringToUpper($SerialNumber);
  UpdateStatus($SerialNumber);  
  //setting serialnumber to test cell
  SetSerialNumberField($SerialNumber);
  $SerialNumberLength = StringLength($SerialNumber);
  // check label length
   UpdateStatus($SerialNumberLength);  
    if($SerialNumberLength!= $ExpectedLength)
  {
    goto lbl_BarcodeScanLoop;
  }
    SetSerialNumberField($SerialNumber);
  return;
}

  
//*************************************************************************//
//**********************Debug view TXT function       ***********************//
//*************************************************************************//
// Main Txt Process Display
// Input:  $View_TXT_String  ： Main  String Input
function Method_View_TXT_Process_Main()
{
    UpdateStatus("============================================================");   // 60 "="
    $Display=".......>>>>>>>>>>>>    "+$View_TXT_String+"    <<<<<<<<<<<<.......";
    UpdateStatus($Display);
    return;
}

//*************************************************************************//
//Step Class 1 Txt Process Display
// Input:  $View_TXT_String  ：Step_1 main
function View_TXT_STEP_MSG() //View_TXT_String
{
  UpdateStatus("================================================================================");   // 80 "="
    $Display="--->MSG:    "+$View_TXT_String+" \r\n";
    UpdateStatus($Display);
    return;
}

//*************************************************************************//

